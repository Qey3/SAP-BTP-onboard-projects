
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 5.16.0
 */

package sap.example.odata.generate.namespaces.odata;

import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.sap.cloud.sdk.datamodel.odata.client.request.ODataEntityKey;
import com.sap.cloud.sdk.datamodel.odatav4.core.SimpleProperty;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntity;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntitySet;
import com.sap.cloud.sdk.result.ElementName;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import sap.example.odata.generate.services.OdataService;


/**
 * <p>Original entity name from the Odata EDM: <b>Category</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.datamodel.odatav4.adapter.GsonVdmAdapterFactory.class)
@JsonSerialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectSerializer.class)
@JsonDeserialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectDeserializer.class)
public class Category
    extends VdmEntity<Category>
    implements VdmEntitySet
{

    @Getter
    private final java.lang.String odataType = "NorthwindModel.Category";
    /**
     * Selector for all available fields of Category.
     * 
     */
    public final static SimpleProperty<Category> ALL_FIELDS = all();
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>CategoryID</b></p>
     * 
     * @return
     *     The categoryID contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("CategoryID")
    private Integer categoryID;
    public final static SimpleProperty.NumericInteger<Category> CATEGORY_ID = new SimpleProperty.NumericInteger<Category>(Category.class, "CategoryID");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>CategoryName</b></p>
     * 
     * @return
     *     The categoryName contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("CategoryName")
    private java.lang.String categoryName;
    public final static SimpleProperty.String<Category> CATEGORY_NAME = new SimpleProperty.String<Category>(Category.class, "CategoryName");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Description</b></p>
     * 
     * @return
     *     The description contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("Description")
    private java.lang.String description;
    public final static SimpleProperty.String<Category> DESCRIPTION = new SimpleProperty.String<Category>(Category.class, "Description");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Picture</b></p>
     * 
     * @return
     *     The picture contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("Picture")
    private byte[] picture;
    public final static SimpleProperty.Binary<Category> PICTURE = new SimpleProperty.Binary<Category>(Category.class, "Picture");
    /**
     * Navigation property <b>Products</b> for <b>Category</b> to multiple <b>Product</b>.
     * 
     */
    @ElementName("Products")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Product> toProducts;
    /**
     * Use with available request builders to apply the <b>Products</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Category, Product> TO_PRODUCTS = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Category, Product>(Category.class, "Products", Product.class);

    @Nonnull
    @Override
    public Class<Category> getType() {
        return Category.class;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>CategoryID</b></p>
     * 
     * @param categoryID
     *     The categoryID to set.
     */
    public void setCategoryID(
        @Nullable
        final Integer categoryID) {
        rememberChangedField("CategoryID", this.categoryID);
        this.categoryID = categoryID;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>CategoryName</b></p>
     * 
     * @param categoryName
     *     The categoryName to set.
     */
    public void setCategoryName(
        @Nullable
        final java.lang.String categoryName) {
        rememberChangedField("CategoryName", this.categoryName);
        this.categoryName = categoryName;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Description</b></p>
     * 
     * @param description
     *     The description to set.
     */
    public void setDescription(
        @Nullable
        final java.lang.String description) {
        rememberChangedField("Description", this.description);
        this.description = description;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Picture</b></p>
     * 
     * @param picture
     *     The picture to set.
     */
    public void setPicture(
        @Nullable
        final byte[] picture) {
        rememberChangedField("Picture", this.picture);
        this.picture = picture;
    }

    @Override
    protected java.lang.String getEntityCollection() {
        return "Categories";
    }

    @Nonnull
    @Override
    protected ODataEntityKey getKey() {
        final ODataEntityKey entityKey = super.getKey();
        entityKey.addKeyProperty("CategoryID", getCategoryID());
        return entityKey;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfFields() {
        final Map<java.lang.String, Object> cloudSdkValues = super.toMapOfFields();
        cloudSdkValues.put("CategoryID", getCategoryID());
        cloudSdkValues.put("CategoryName", getCategoryName());
        cloudSdkValues.put("Description", getDescription());
        cloudSdkValues.put("Picture", getPicture());
        return cloudSdkValues;
    }

    @Override
    protected void fromMap(final Map<java.lang.String, Object> inputValues) {
        final Map<java.lang.String, Object> cloudSdkValues = Maps.newLinkedHashMap(inputValues);
        // simple properties
        {
            if (cloudSdkValues.containsKey("CategoryID")) {
                final Object value = cloudSdkValues.remove("CategoryID");
                if ((value == null)||(!value.equals(getCategoryID()))) {
                    setCategoryID(((Integer) value));
                }
            }
            if (cloudSdkValues.containsKey("CategoryName")) {
                final Object value = cloudSdkValues.remove("CategoryName");
                if ((value == null)||(!value.equals(getCategoryName()))) {
                    setCategoryName(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("Description")) {
                final Object value = cloudSdkValues.remove("Description");
                if ((value == null)||(!value.equals(getDescription()))) {
                    setDescription(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("Picture")) {
                final Object value = cloudSdkValues.remove("Picture");
                if ((value == null)||(!value.equals(getPicture()))) {
                    setPicture(((byte[]) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((cloudSdkValues).containsKey("Products")) {
                final Object cloudSdkValue = (cloudSdkValues).remove("Products");
                if (cloudSdkValue instanceof Iterable) {
                    if (toProducts == null) {
                        toProducts = Lists.newArrayList();
                    } else {
                        toProducts = Lists.newArrayList(toProducts);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) cloudSdkValue)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Product entity;
                        if (toProducts.size()>i) {
                            entity = toProducts.get(i);
                        } else {
                            entity = new Product();
                            toProducts.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(cloudSdkValues);
    }

    @Override
    protected java.lang.String getDefaultServicePath() {
        return OdataService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfNavigationProperties() {
        final Map<java.lang.String, Object> cloudSdkValues = super.toMapOfNavigationProperties();
        if (toProducts!= null) {
            (cloudSdkValues).put("Products", toProducts);
        }
        return cloudSdkValues;
    }

    /**
     * Retrieval of associated <b>Product</b> entities (one to many). This corresponds to the OData navigation property <b>Products</b>.
     * <p>
     * If the navigation property for an entity <b>Category</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>Products</b> is already loaded, the result will contain the <b>Product</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Product>> getProductsIfPresent() {
        return Option.of(toProducts);
    }

    /**
     * Overwrites the list of associated <b>Product</b> entities for the loaded navigation property <b>Products</b>.
     * <p>
     * If the navigation property <b>Products</b> of a queried <b>Category</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param cloudSdkValue
     *     List of <b>Product</b> entities.
     */
    public void setProducts(
        @Nonnull
        final List<Product> cloudSdkValue) {
        if (toProducts == null) {
            toProducts = Lists.newArrayList();
        }
        toProducts.clear();
        toProducts.addAll(cloudSdkValue);
    }

    /**
     * Adds elements to the list of associated <b>Product</b> entities. This corresponds to the OData navigation property <b>Products</b>.
     * <p>
     * If the navigation property <b>Products</b> of a queried <b>Category</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Product</b> entities.
     */
    public void addProducts(Product... entity) {
        if (toProducts == null) {
            toProducts = Lists.newArrayList();
        }
        toProducts.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of Category instances.
     * 
     */
    public final static class CategoryBuilder {

        private List<Product> toProducts = Lists.newArrayList();

        private Category.CategoryBuilder toProducts(final List<Product> cloudSdkValue) {
            toProducts.addAll(cloudSdkValue);
            return this;
        }

        /**
         * Navigation property <b>Products</b> for <b>Category</b> to multiple <b>Product</b>.
         * 
         * @param cloudSdkValue
         *     The Products to build this Category with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Category.CategoryBuilder products(Product... cloudSdkValue) {
            return toProducts(Lists.newArrayList(cloudSdkValue));
        }

    }

}
