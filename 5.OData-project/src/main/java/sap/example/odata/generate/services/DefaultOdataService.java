
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 5.16.0
 */

package sap.example.odata.generate.services;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nonnull;
import com.sap.cloud.sdk.datamodel.odatav4.core.BatchRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.CountRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.CreateRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.DeleteRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.GetAllRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.GetByKeyRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.ServiceWithNavigableEntities;
import com.sap.cloud.sdk.datamodel.odatav4.core.UpdateRequestBuilder;
import lombok.Getter;
import sap.example.odata.generate.namespaces.odata.Alphabetical_list_of_product;
import sap.example.odata.generate.namespaces.odata.Category;
import sap.example.odata.generate.namespaces.odata.Category_Sales_for_1997;
import sap.example.odata.generate.namespaces.odata.Current_Product_List;
import sap.example.odata.generate.namespaces.odata.Customer;
import sap.example.odata.generate.namespaces.odata.CustomerDemographic;
import sap.example.odata.generate.namespaces.odata.Customer_and_Suppliers_by_City;
import sap.example.odata.generate.namespaces.odata.Employee;
import sap.example.odata.generate.namespaces.odata.Invoice;
import sap.example.odata.generate.namespaces.odata.Order;
import sap.example.odata.generate.namespaces.odata.Order_Detail;
import sap.example.odata.generate.namespaces.odata.Order_Details_Extended;
import sap.example.odata.generate.namespaces.odata.Order_Subtotal;
import sap.example.odata.generate.namespaces.odata.Orders_Qry;
import sap.example.odata.generate.namespaces.odata.Product;
import sap.example.odata.generate.namespaces.odata.Product_Sales_for_1997;
import sap.example.odata.generate.namespaces.odata.Products_Above_Average_Price;
import sap.example.odata.generate.namespaces.odata.Products_by_Category;
import sap.example.odata.generate.namespaces.odata.Region;
import sap.example.odata.generate.namespaces.odata.Sales_Totals_by_Amount;
import sap.example.odata.generate.namespaces.odata.Sales_by_Category;
import sap.example.odata.generate.namespaces.odata.Shipper;
import sap.example.odata.generate.namespaces.odata.Summary_of_Sales_by_Quarter;
import sap.example.odata.generate.namespaces.odata.Summary_of_Sales_by_Year;
import sap.example.odata.generate.namespaces.odata.Supplier;
import sap.example.odata.generate.namespaces.odata.Territory;


/**
 * <h3>Details:</h3><table summary='Details'><tr><td align='right'>OData Service:</td><td>service</td></tr></table>
 * 
 */
public class DefaultOdataService
    implements ServiceWithNavigableEntities, OdataService
{

    @Nonnull
    @Getter
    private final String servicePath;

    /**
     * Creates a service using {@link OdataService#DEFAULT_SERVICE_PATH} to send the requests.
     * 
     */
    public DefaultOdataService() {
        servicePath = OdataService.DEFAULT_SERVICE_PATH;
    }

    /**
     * Creates a service using the provided service path to send the requests.
     * <p>
     * Used by the fluent {@link #withServicePath(String)} method.
     * 
     */
    private DefaultOdataService(
        @Nonnull
        final String servicePath) {
        this.servicePath = servicePath;
    }

    @Override
    @Nonnull
    public DefaultOdataService withServicePath(
        @Nonnull
        final String servicePath) {
        return new DefaultOdataService(servicePath);
    }

    @Override
    @Nonnull
    public BatchRequestBuilder batch() {
        return new BatchRequestBuilder(servicePath);
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Category> getAllCategories() {
        return new GetAllRequestBuilder<Category>(servicePath, Category.class, "Categories");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Category> countCategories() {
        return new CountRequestBuilder<Category>(servicePath, Category.class, "Categories");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Category> getCategoriesByKey(final Integer categoryID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CategoryID", categoryID);
        return new GetByKeyRequestBuilder<Category>(servicePath, Category.class, key, "Categories");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Category> createCategories(
        @Nonnull
        final Category category) {
        return new CreateRequestBuilder<Category>(servicePath, category, "Categories");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Category> updateCategories(
        @Nonnull
        final Category category) {
        return new UpdateRequestBuilder<Category>(servicePath, category, "Categories");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Category> deleteCategories(
        @Nonnull
        final Category category) {
        return new DeleteRequestBuilder<Category>(servicePath, category, "Categories");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<CustomerDemographic> getAllCustomerDemographics() {
        return new GetAllRequestBuilder<CustomerDemographic>(servicePath, CustomerDemographic.class, "CustomerDemographics");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<CustomerDemographic> countCustomerDemographics() {
        return new CountRequestBuilder<CustomerDemographic>(servicePath, CustomerDemographic.class, "CustomerDemographics");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<CustomerDemographic> getCustomerDemographicsByKey(final String customerTypeID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CustomerTypeID", customerTypeID);
        return new GetByKeyRequestBuilder<CustomerDemographic>(servicePath, CustomerDemographic.class, key, "CustomerDemographics");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<CustomerDemographic> createCustomerDemographics(
        @Nonnull
        final CustomerDemographic customerDemographic) {
        return new CreateRequestBuilder<CustomerDemographic>(servicePath, customerDemographic, "CustomerDemographics");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<CustomerDemographic> updateCustomerDemographics(
        @Nonnull
        final CustomerDemographic customerDemographic) {
        return new UpdateRequestBuilder<CustomerDemographic>(servicePath, customerDemographic, "CustomerDemographics");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<CustomerDemographic> deleteCustomerDemographics(
        @Nonnull
        final CustomerDemographic customerDemographic) {
        return new DeleteRequestBuilder<CustomerDemographic>(servicePath, customerDemographic, "CustomerDemographics");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Customer> getAllCustomers() {
        return new GetAllRequestBuilder<Customer>(servicePath, Customer.class, "Customers");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Customer> countCustomers() {
        return new CountRequestBuilder<Customer>(servicePath, Customer.class, "Customers");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Customer> getCustomersByKey(final String customerID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CustomerID", customerID);
        return new GetByKeyRequestBuilder<Customer>(servicePath, Customer.class, key, "Customers");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Customer> createCustomers(
        @Nonnull
        final Customer customer) {
        return new CreateRequestBuilder<Customer>(servicePath, customer, "Customers");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Customer> updateCustomers(
        @Nonnull
        final Customer customer) {
        return new UpdateRequestBuilder<Customer>(servicePath, customer, "Customers");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Customer> deleteCustomers(
        @Nonnull
        final Customer customer) {
        return new DeleteRequestBuilder<Customer>(servicePath, customer, "Customers");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Employee> getAllEmployees() {
        return new GetAllRequestBuilder<Employee>(servicePath, Employee.class, "Employees");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Employee> countEmployees() {
        return new CountRequestBuilder<Employee>(servicePath, Employee.class, "Employees");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Employee> getEmployeesByKey(final Integer employeeID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("EmployeeID", employeeID);
        return new GetByKeyRequestBuilder<Employee>(servicePath, Employee.class, key, "Employees");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Employee> createEmployees(
        @Nonnull
        final Employee employee) {
        return new CreateRequestBuilder<Employee>(servicePath, employee, "Employees");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Employee> updateEmployees(
        @Nonnull
        final Employee employee) {
        return new UpdateRequestBuilder<Employee>(servicePath, employee, "Employees");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Employee> deleteEmployees(
        @Nonnull
        final Employee employee) {
        return new DeleteRequestBuilder<Employee>(servicePath, employee, "Employees");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Order_Detail> getAllOrder_Details() {
        return new GetAllRequestBuilder<Order_Detail>(servicePath, Order_Detail.class, "Order_Details");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Order_Detail> countOrder_Details() {
        return new CountRequestBuilder<Order_Detail>(servicePath, Order_Detail.class, "Order_Details");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Order_Detail> getOrder_DetailsByKey(final Integer orderID, final Integer productID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("OrderID", orderID);
        key.put("ProductID", productID);
        return new GetByKeyRequestBuilder<Order_Detail>(servicePath, Order_Detail.class, key, "Order_Details");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Order_Detail> createOrder_Details(
        @Nonnull
        final Order_Detail order_Detail) {
        return new CreateRequestBuilder<Order_Detail>(servicePath, order_Detail, "Order_Details");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Order_Detail> updateOrder_Details(
        @Nonnull
        final Order_Detail order_Detail) {
        return new UpdateRequestBuilder<Order_Detail>(servicePath, order_Detail, "Order_Details");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Order_Detail> deleteOrder_Details(
        @Nonnull
        final Order_Detail order_Detail) {
        return new DeleteRequestBuilder<Order_Detail>(servicePath, order_Detail, "Order_Details");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Order> getAllOrders() {
        return new GetAllRequestBuilder<Order>(servicePath, Order.class, "Orders");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Order> countOrders() {
        return new CountRequestBuilder<Order>(servicePath, Order.class, "Orders");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Order> getOrdersByKey(final Integer orderID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("OrderID", orderID);
        return new GetByKeyRequestBuilder<Order>(servicePath, Order.class, key, "Orders");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Order> createOrders(
        @Nonnull
        final Order order) {
        return new CreateRequestBuilder<Order>(servicePath, order, "Orders");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Order> updateOrders(
        @Nonnull
        final Order order) {
        return new UpdateRequestBuilder<Order>(servicePath, order, "Orders");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Order> deleteOrders(
        @Nonnull
        final Order order) {
        return new DeleteRequestBuilder<Order>(servicePath, order, "Orders");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Product> getAllProducts() {
        return new GetAllRequestBuilder<Product>(servicePath, Product.class, "Products");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Product> countProducts() {
        return new CountRequestBuilder<Product>(servicePath, Product.class, "Products");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Product> getProductsByKey(final Integer productID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("ProductID", productID);
        return new GetByKeyRequestBuilder<Product>(servicePath, Product.class, key, "Products");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Product> createProducts(
        @Nonnull
        final Product product) {
        return new CreateRequestBuilder<Product>(servicePath, product, "Products");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Product> updateProducts(
        @Nonnull
        final Product product) {
        return new UpdateRequestBuilder<Product>(servicePath, product, "Products");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Product> deleteProducts(
        @Nonnull
        final Product product) {
        return new DeleteRequestBuilder<Product>(servicePath, product, "Products");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Region> getAllRegions() {
        return new GetAllRequestBuilder<Region>(servicePath, Region.class, "Regions");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Region> countRegions() {
        return new CountRequestBuilder<Region>(servicePath, Region.class, "Regions");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Region> getRegionsByKey(final Integer regionID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("RegionID", regionID);
        return new GetByKeyRequestBuilder<Region>(servicePath, Region.class, key, "Regions");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Region> createRegions(
        @Nonnull
        final Region region) {
        return new CreateRequestBuilder<Region>(servicePath, region, "Regions");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Region> updateRegions(
        @Nonnull
        final Region region) {
        return new UpdateRequestBuilder<Region>(servicePath, region, "Regions");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Region> deleteRegions(
        @Nonnull
        final Region region) {
        return new DeleteRequestBuilder<Region>(servicePath, region, "Regions");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Shipper> getAllShippers() {
        return new GetAllRequestBuilder<Shipper>(servicePath, Shipper.class, "Shippers");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Shipper> countShippers() {
        return new CountRequestBuilder<Shipper>(servicePath, Shipper.class, "Shippers");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Shipper> getShippersByKey(final Integer shipperID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("ShipperID", shipperID);
        return new GetByKeyRequestBuilder<Shipper>(servicePath, Shipper.class, key, "Shippers");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Shipper> createShippers(
        @Nonnull
        final Shipper shipper) {
        return new CreateRequestBuilder<Shipper>(servicePath, shipper, "Shippers");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Shipper> updateShippers(
        @Nonnull
        final Shipper shipper) {
        return new UpdateRequestBuilder<Shipper>(servicePath, shipper, "Shippers");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Shipper> deleteShippers(
        @Nonnull
        final Shipper shipper) {
        return new DeleteRequestBuilder<Shipper>(servicePath, shipper, "Shippers");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Supplier> getAllSuppliers() {
        return new GetAllRequestBuilder<Supplier>(servicePath, Supplier.class, "Suppliers");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Supplier> countSuppliers() {
        return new CountRequestBuilder<Supplier>(servicePath, Supplier.class, "Suppliers");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Supplier> getSuppliersByKey(final Integer supplierID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("SupplierID", supplierID);
        return new GetByKeyRequestBuilder<Supplier>(servicePath, Supplier.class, key, "Suppliers");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Supplier> createSuppliers(
        @Nonnull
        final Supplier supplier) {
        return new CreateRequestBuilder<Supplier>(servicePath, supplier, "Suppliers");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Supplier> updateSuppliers(
        @Nonnull
        final Supplier supplier) {
        return new UpdateRequestBuilder<Supplier>(servicePath, supplier, "Suppliers");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Supplier> deleteSuppliers(
        @Nonnull
        final Supplier supplier) {
        return new DeleteRequestBuilder<Supplier>(servicePath, supplier, "Suppliers");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Territory> getAllTerritories() {
        return new GetAllRequestBuilder<Territory>(servicePath, Territory.class, "Territories");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Territory> countTerritories() {
        return new CountRequestBuilder<Territory>(servicePath, Territory.class, "Territories");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Territory> getTerritoriesByKey(final String territoryID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("TerritoryID", territoryID);
        return new GetByKeyRequestBuilder<Territory>(servicePath, Territory.class, key, "Territories");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Territory> createTerritories(
        @Nonnull
        final Territory territory) {
        return new CreateRequestBuilder<Territory>(servicePath, territory, "Territories");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Territory> updateTerritories(
        @Nonnull
        final Territory territory) {
        return new UpdateRequestBuilder<Territory>(servicePath, territory, "Territories");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Territory> deleteTerritories(
        @Nonnull
        final Territory territory) {
        return new DeleteRequestBuilder<Territory>(servicePath, territory, "Territories");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Alphabetical_list_of_product> getAllAlphabetical_list_of_products() {
        return new GetAllRequestBuilder<Alphabetical_list_of_product>(servicePath, Alphabetical_list_of_product.class, "Alphabetical_list_of_products");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Alphabetical_list_of_product> countAlphabetical_list_of_products() {
        return new CountRequestBuilder<Alphabetical_list_of_product>(servicePath, Alphabetical_list_of_product.class, "Alphabetical_list_of_products");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Alphabetical_list_of_product> getAlphabetical_list_of_productsByKey(final String categoryName, final Boolean discontinued, final Integer productID, final String productName) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CategoryName", categoryName);
        key.put("Discontinued", discontinued);
        key.put("ProductID", productID);
        key.put("ProductName", productName);
        return new GetByKeyRequestBuilder<Alphabetical_list_of_product>(servicePath, Alphabetical_list_of_product.class, key, "Alphabetical_list_of_products");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Alphabetical_list_of_product> createAlphabetical_list_of_products(
        @Nonnull
        final Alphabetical_list_of_product alphabetical_list_of_product) {
        return new CreateRequestBuilder<Alphabetical_list_of_product>(servicePath, alphabetical_list_of_product, "Alphabetical_list_of_products");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Alphabetical_list_of_product> updateAlphabetical_list_of_products(
        @Nonnull
        final Alphabetical_list_of_product alphabetical_list_of_product) {
        return new UpdateRequestBuilder<Alphabetical_list_of_product>(servicePath, alphabetical_list_of_product, "Alphabetical_list_of_products");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Alphabetical_list_of_product> deleteAlphabetical_list_of_products(
        @Nonnull
        final Alphabetical_list_of_product alphabetical_list_of_product) {
        return new DeleteRequestBuilder<Alphabetical_list_of_product>(servicePath, alphabetical_list_of_product, "Alphabetical_list_of_products");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Category_Sales_for_1997> getAllCategory_Sales_for_1997() {
        return new GetAllRequestBuilder<Category_Sales_for_1997>(servicePath, Category_Sales_for_1997 .class, "Category_Sales_for_1997");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Category_Sales_for_1997> countCategory_Sales_for_1997() {
        return new CountRequestBuilder<Category_Sales_for_1997>(servicePath, Category_Sales_for_1997 .class, "Category_Sales_for_1997");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Category_Sales_for_1997> getCategory_Sales_for_1997ByKey(final String categoryName) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CategoryName", categoryName);
        return new GetByKeyRequestBuilder<Category_Sales_for_1997>(servicePath, Category_Sales_for_1997 .class, key, "Category_Sales_for_1997");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Category_Sales_for_1997> createCategory_Sales_for_1997(
        @Nonnull
        final Category_Sales_for_1997 category_Sales_for_1997) {
        return new CreateRequestBuilder<Category_Sales_for_1997>(servicePath, category_Sales_for_1997, "Category_Sales_for_1997");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Category_Sales_for_1997> updateCategory_Sales_for_1997(
        @Nonnull
        final Category_Sales_for_1997 category_Sales_for_1997) {
        return new UpdateRequestBuilder<Category_Sales_for_1997>(servicePath, category_Sales_for_1997, "Category_Sales_for_1997");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Category_Sales_for_1997> deleteCategory_Sales_for_1997(
        @Nonnull
        final Category_Sales_for_1997 category_Sales_for_1997) {
        return new DeleteRequestBuilder<Category_Sales_for_1997>(servicePath, category_Sales_for_1997, "Category_Sales_for_1997");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Current_Product_List> getAllCurrent_Product_Lists() {
        return new GetAllRequestBuilder<Current_Product_List>(servicePath, Current_Product_List.class, "Current_Product_Lists");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Current_Product_List> countCurrent_Product_Lists() {
        return new CountRequestBuilder<Current_Product_List>(servicePath, Current_Product_List.class, "Current_Product_Lists");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Current_Product_List> getCurrent_Product_ListsByKey(final Integer productID, final String productName) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("ProductID", productID);
        key.put("ProductName", productName);
        return new GetByKeyRequestBuilder<Current_Product_List>(servicePath, Current_Product_List.class, key, "Current_Product_Lists");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Current_Product_List> createCurrent_Product_Lists(
        @Nonnull
        final Current_Product_List current_Product_List) {
        return new CreateRequestBuilder<Current_Product_List>(servicePath, current_Product_List, "Current_Product_Lists");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Current_Product_List> updateCurrent_Product_Lists(
        @Nonnull
        final Current_Product_List current_Product_List) {
        return new UpdateRequestBuilder<Current_Product_List>(servicePath, current_Product_List, "Current_Product_Lists");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Current_Product_List> deleteCurrent_Product_Lists(
        @Nonnull
        final Current_Product_List current_Product_List) {
        return new DeleteRequestBuilder<Current_Product_List>(servicePath, current_Product_List, "Current_Product_Lists");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Customer_and_Suppliers_by_City> getAllCustomer_and_Suppliers_by_Cities() {
        return new GetAllRequestBuilder<Customer_and_Suppliers_by_City>(servicePath, Customer_and_Suppliers_by_City.class, "Customer_and_Suppliers_by_Cities");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Customer_and_Suppliers_by_City> countCustomer_and_Suppliers_by_Cities() {
        return new CountRequestBuilder<Customer_and_Suppliers_by_City>(servicePath, Customer_and_Suppliers_by_City.class, "Customer_and_Suppliers_by_Cities");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Customer_and_Suppliers_by_City> getCustomer_and_Suppliers_by_CitiesByKey(final String companyName, final String relationship) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CompanyName", companyName);
        key.put("Relationship", relationship);
        return new GetByKeyRequestBuilder<Customer_and_Suppliers_by_City>(servicePath, Customer_and_Suppliers_by_City.class, key, "Customer_and_Suppliers_by_Cities");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Customer_and_Suppliers_by_City> createCustomer_and_Suppliers_by_Cities(
        @Nonnull
        final Customer_and_Suppliers_by_City customer_and_Suppliers_by_City) {
        return new CreateRequestBuilder<Customer_and_Suppliers_by_City>(servicePath, customer_and_Suppliers_by_City, "Customer_and_Suppliers_by_Cities");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Customer_and_Suppliers_by_City> updateCustomer_and_Suppliers_by_Cities(
        @Nonnull
        final Customer_and_Suppliers_by_City customer_and_Suppliers_by_City) {
        return new UpdateRequestBuilder<Customer_and_Suppliers_by_City>(servicePath, customer_and_Suppliers_by_City, "Customer_and_Suppliers_by_Cities");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Customer_and_Suppliers_by_City> deleteCustomer_and_Suppliers_by_Cities(
        @Nonnull
        final Customer_and_Suppliers_by_City customer_and_Suppliers_by_City) {
        return new DeleteRequestBuilder<Customer_and_Suppliers_by_City>(servicePath, customer_and_Suppliers_by_City, "Customer_and_Suppliers_by_Cities");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Invoice> getAllInvoices() {
        return new GetAllRequestBuilder<Invoice>(servicePath, Invoice.class, "Invoices");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Invoice> countInvoices() {
        return new CountRequestBuilder<Invoice>(servicePath, Invoice.class, "Invoices");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Invoice> getInvoicesByKey(final String customerName, final Float discount, final Integer orderID, final Integer productID, final String productName, final Short quantity, final String salesperson, final String shipperName, final BigDecimal unitPrice) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CustomerName", customerName);
        key.put("Discount", discount);
        key.put("OrderID", orderID);
        key.put("ProductID", productID);
        key.put("ProductName", productName);
        key.put("Quantity", quantity);
        key.put("Salesperson", salesperson);
        key.put("ShipperName", shipperName);
        key.put("UnitPrice", unitPrice);
        return new GetByKeyRequestBuilder<Invoice>(servicePath, Invoice.class, key, "Invoices");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Invoice> createInvoices(
        @Nonnull
        final Invoice invoice) {
        return new CreateRequestBuilder<Invoice>(servicePath, invoice, "Invoices");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Invoice> updateInvoices(
        @Nonnull
        final Invoice invoice) {
        return new UpdateRequestBuilder<Invoice>(servicePath, invoice, "Invoices");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Invoice> deleteInvoices(
        @Nonnull
        final Invoice invoice) {
        return new DeleteRequestBuilder<Invoice>(servicePath, invoice, "Invoices");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Order_Details_Extended> getAllOrder_Details_Extendeds() {
        return new GetAllRequestBuilder<Order_Details_Extended>(servicePath, Order_Details_Extended.class, "Order_Details_Extendeds");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Order_Details_Extended> countOrder_Details_Extendeds() {
        return new CountRequestBuilder<Order_Details_Extended>(servicePath, Order_Details_Extended.class, "Order_Details_Extendeds");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Order_Details_Extended> getOrder_Details_ExtendedsByKey(final Float discount, final Integer orderID, final Integer productID, final String productName, final Short quantity, final BigDecimal unitPrice) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("Discount", discount);
        key.put("OrderID", orderID);
        key.put("ProductID", productID);
        key.put("ProductName", productName);
        key.put("Quantity", quantity);
        key.put("UnitPrice", unitPrice);
        return new GetByKeyRequestBuilder<Order_Details_Extended>(servicePath, Order_Details_Extended.class, key, "Order_Details_Extendeds");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Order_Details_Extended> createOrder_Details_Extendeds(
        @Nonnull
        final Order_Details_Extended order_Details_Extended) {
        return new CreateRequestBuilder<Order_Details_Extended>(servicePath, order_Details_Extended, "Order_Details_Extendeds");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Order_Details_Extended> updateOrder_Details_Extendeds(
        @Nonnull
        final Order_Details_Extended order_Details_Extended) {
        return new UpdateRequestBuilder<Order_Details_Extended>(servicePath, order_Details_Extended, "Order_Details_Extendeds");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Order_Details_Extended> deleteOrder_Details_Extendeds(
        @Nonnull
        final Order_Details_Extended order_Details_Extended) {
        return new DeleteRequestBuilder<Order_Details_Extended>(servicePath, order_Details_Extended, "Order_Details_Extendeds");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Order_Subtotal> getAllOrder_Subtotals() {
        return new GetAllRequestBuilder<Order_Subtotal>(servicePath, Order_Subtotal.class, "Order_Subtotals");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Order_Subtotal> countOrder_Subtotals() {
        return new CountRequestBuilder<Order_Subtotal>(servicePath, Order_Subtotal.class, "Order_Subtotals");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Order_Subtotal> getOrder_SubtotalsByKey(final Integer orderID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("OrderID", orderID);
        return new GetByKeyRequestBuilder<Order_Subtotal>(servicePath, Order_Subtotal.class, key, "Order_Subtotals");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Order_Subtotal> createOrder_Subtotals(
        @Nonnull
        final Order_Subtotal order_Subtotal) {
        return new CreateRequestBuilder<Order_Subtotal>(servicePath, order_Subtotal, "Order_Subtotals");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Order_Subtotal> updateOrder_Subtotals(
        @Nonnull
        final Order_Subtotal order_Subtotal) {
        return new UpdateRequestBuilder<Order_Subtotal>(servicePath, order_Subtotal, "Order_Subtotals");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Order_Subtotal> deleteOrder_Subtotals(
        @Nonnull
        final Order_Subtotal order_Subtotal) {
        return new DeleteRequestBuilder<Order_Subtotal>(servicePath, order_Subtotal, "Order_Subtotals");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Orders_Qry> getAllOrders_Qries() {
        return new GetAllRequestBuilder<Orders_Qry>(servicePath, Orders_Qry.class, "Orders_Qries");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Orders_Qry> countOrders_Qries() {
        return new CountRequestBuilder<Orders_Qry>(servicePath, Orders_Qry.class, "Orders_Qries");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Orders_Qry> getOrders_QriesByKey(final String companyName, final Integer orderID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CompanyName", companyName);
        key.put("OrderID", orderID);
        return new GetByKeyRequestBuilder<Orders_Qry>(servicePath, Orders_Qry.class, key, "Orders_Qries");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Orders_Qry> createOrders_Qries(
        @Nonnull
        final Orders_Qry orders_Qry) {
        return new CreateRequestBuilder<Orders_Qry>(servicePath, orders_Qry, "Orders_Qries");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Orders_Qry> updateOrders_Qries(
        @Nonnull
        final Orders_Qry orders_Qry) {
        return new UpdateRequestBuilder<Orders_Qry>(servicePath, orders_Qry, "Orders_Qries");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Orders_Qry> deleteOrders_Qries(
        @Nonnull
        final Orders_Qry orders_Qry) {
        return new DeleteRequestBuilder<Orders_Qry>(servicePath, orders_Qry, "Orders_Qries");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Product_Sales_for_1997> getAllProduct_Sales_for_1997() {
        return new GetAllRequestBuilder<Product_Sales_for_1997>(servicePath, Product_Sales_for_1997 .class, "Product_Sales_for_1997");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Product_Sales_for_1997> countProduct_Sales_for_1997() {
        return new CountRequestBuilder<Product_Sales_for_1997>(servicePath, Product_Sales_for_1997 .class, "Product_Sales_for_1997");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Product_Sales_for_1997> getProduct_Sales_for_1997ByKey(final String categoryName, final String productName) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CategoryName", categoryName);
        key.put("ProductName", productName);
        return new GetByKeyRequestBuilder<Product_Sales_for_1997>(servicePath, Product_Sales_for_1997 .class, key, "Product_Sales_for_1997");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Product_Sales_for_1997> createProduct_Sales_for_1997(
        @Nonnull
        final Product_Sales_for_1997 product_Sales_for_1997) {
        return new CreateRequestBuilder<Product_Sales_for_1997>(servicePath, product_Sales_for_1997, "Product_Sales_for_1997");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Product_Sales_for_1997> updateProduct_Sales_for_1997(
        @Nonnull
        final Product_Sales_for_1997 product_Sales_for_1997) {
        return new UpdateRequestBuilder<Product_Sales_for_1997>(servicePath, product_Sales_for_1997, "Product_Sales_for_1997");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Product_Sales_for_1997> deleteProduct_Sales_for_1997(
        @Nonnull
        final Product_Sales_for_1997 product_Sales_for_1997) {
        return new DeleteRequestBuilder<Product_Sales_for_1997>(servicePath, product_Sales_for_1997, "Product_Sales_for_1997");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Products_Above_Average_Price> getAllProducts_Above_Average_Prices() {
        return new GetAllRequestBuilder<Products_Above_Average_Price>(servicePath, Products_Above_Average_Price.class, "Products_Above_Average_Prices");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Products_Above_Average_Price> countProducts_Above_Average_Prices() {
        return new CountRequestBuilder<Products_Above_Average_Price>(servicePath, Products_Above_Average_Price.class, "Products_Above_Average_Prices");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Products_Above_Average_Price> getProducts_Above_Average_PricesByKey(final String productName) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("ProductName", productName);
        return new GetByKeyRequestBuilder<Products_Above_Average_Price>(servicePath, Products_Above_Average_Price.class, key, "Products_Above_Average_Prices");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Products_Above_Average_Price> createProducts_Above_Average_Prices(
        @Nonnull
        final Products_Above_Average_Price products_Above_Average_Price) {
        return new CreateRequestBuilder<Products_Above_Average_Price>(servicePath, products_Above_Average_Price, "Products_Above_Average_Prices");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Products_Above_Average_Price> updateProducts_Above_Average_Prices(
        @Nonnull
        final Products_Above_Average_Price products_Above_Average_Price) {
        return new UpdateRequestBuilder<Products_Above_Average_Price>(servicePath, products_Above_Average_Price, "Products_Above_Average_Prices");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Products_Above_Average_Price> deleteProducts_Above_Average_Prices(
        @Nonnull
        final Products_Above_Average_Price products_Above_Average_Price) {
        return new DeleteRequestBuilder<Products_Above_Average_Price>(servicePath, products_Above_Average_Price, "Products_Above_Average_Prices");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Products_by_Category> getAllProducts_by_Categories() {
        return new GetAllRequestBuilder<Products_by_Category>(servicePath, Products_by_Category.class, "Products_by_Categories");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Products_by_Category> countProducts_by_Categories() {
        return new CountRequestBuilder<Products_by_Category>(servicePath, Products_by_Category.class, "Products_by_Categories");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Products_by_Category> getProducts_by_CategoriesByKey(final String categoryName, final Boolean discontinued, final String productName) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CategoryName", categoryName);
        key.put("Discontinued", discontinued);
        key.put("ProductName", productName);
        return new GetByKeyRequestBuilder<Products_by_Category>(servicePath, Products_by_Category.class, key, "Products_by_Categories");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Products_by_Category> createProducts_by_Categories(
        @Nonnull
        final Products_by_Category products_by_Category) {
        return new CreateRequestBuilder<Products_by_Category>(servicePath, products_by_Category, "Products_by_Categories");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Products_by_Category> updateProducts_by_Categories(
        @Nonnull
        final Products_by_Category products_by_Category) {
        return new UpdateRequestBuilder<Products_by_Category>(servicePath, products_by_Category, "Products_by_Categories");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Products_by_Category> deleteProducts_by_Categories(
        @Nonnull
        final Products_by_Category products_by_Category) {
        return new DeleteRequestBuilder<Products_by_Category>(servicePath, products_by_Category, "Products_by_Categories");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Sales_by_Category> getAllSales_by_Categories() {
        return new GetAllRequestBuilder<Sales_by_Category>(servicePath, Sales_by_Category.class, "Sales_by_Categories");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Sales_by_Category> countSales_by_Categories() {
        return new CountRequestBuilder<Sales_by_Category>(servicePath, Sales_by_Category.class, "Sales_by_Categories");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Sales_by_Category> getSales_by_CategoriesByKey(final Integer categoryID, final String categoryName, final String productName) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CategoryID", categoryID);
        key.put("CategoryName", categoryName);
        key.put("ProductName", productName);
        return new GetByKeyRequestBuilder<Sales_by_Category>(servicePath, Sales_by_Category.class, key, "Sales_by_Categories");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Sales_by_Category> createSales_by_Categories(
        @Nonnull
        final Sales_by_Category sales_by_Category) {
        return new CreateRequestBuilder<Sales_by_Category>(servicePath, sales_by_Category, "Sales_by_Categories");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Sales_by_Category> updateSales_by_Categories(
        @Nonnull
        final Sales_by_Category sales_by_Category) {
        return new UpdateRequestBuilder<Sales_by_Category>(servicePath, sales_by_Category, "Sales_by_Categories");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Sales_by_Category> deleteSales_by_Categories(
        @Nonnull
        final Sales_by_Category sales_by_Category) {
        return new DeleteRequestBuilder<Sales_by_Category>(servicePath, sales_by_Category, "Sales_by_Categories");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Sales_Totals_by_Amount> getAllSales_Totals_by_Amounts() {
        return new GetAllRequestBuilder<Sales_Totals_by_Amount>(servicePath, Sales_Totals_by_Amount.class, "Sales_Totals_by_Amounts");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Sales_Totals_by_Amount> countSales_Totals_by_Amounts() {
        return new CountRequestBuilder<Sales_Totals_by_Amount>(servicePath, Sales_Totals_by_Amount.class, "Sales_Totals_by_Amounts");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Sales_Totals_by_Amount> getSales_Totals_by_AmountsByKey(final String companyName, final Integer orderID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("CompanyName", companyName);
        key.put("OrderID", orderID);
        return new GetByKeyRequestBuilder<Sales_Totals_by_Amount>(servicePath, Sales_Totals_by_Amount.class, key, "Sales_Totals_by_Amounts");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Sales_Totals_by_Amount> createSales_Totals_by_Amounts(
        @Nonnull
        final Sales_Totals_by_Amount sales_Totals_by_Amount) {
        return new CreateRequestBuilder<Sales_Totals_by_Amount>(servicePath, sales_Totals_by_Amount, "Sales_Totals_by_Amounts");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Sales_Totals_by_Amount> updateSales_Totals_by_Amounts(
        @Nonnull
        final Sales_Totals_by_Amount sales_Totals_by_Amount) {
        return new UpdateRequestBuilder<Sales_Totals_by_Amount>(servicePath, sales_Totals_by_Amount, "Sales_Totals_by_Amounts");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Sales_Totals_by_Amount> deleteSales_Totals_by_Amounts(
        @Nonnull
        final Sales_Totals_by_Amount sales_Totals_by_Amount) {
        return new DeleteRequestBuilder<Sales_Totals_by_Amount>(servicePath, sales_Totals_by_Amount, "Sales_Totals_by_Amounts");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Summary_of_Sales_by_Quarter> getAllSummary_of_Sales_by_Quarters() {
        return new GetAllRequestBuilder<Summary_of_Sales_by_Quarter>(servicePath, Summary_of_Sales_by_Quarter.class, "Summary_of_Sales_by_Quarters");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Summary_of_Sales_by_Quarter> countSummary_of_Sales_by_Quarters() {
        return new CountRequestBuilder<Summary_of_Sales_by_Quarter>(servicePath, Summary_of_Sales_by_Quarter.class, "Summary_of_Sales_by_Quarters");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Summary_of_Sales_by_Quarter> getSummary_of_Sales_by_QuartersByKey(final Integer orderID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("OrderID", orderID);
        return new GetByKeyRequestBuilder<Summary_of_Sales_by_Quarter>(servicePath, Summary_of_Sales_by_Quarter.class, key, "Summary_of_Sales_by_Quarters");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Summary_of_Sales_by_Quarter> createSummary_of_Sales_by_Quarters(
        @Nonnull
        final Summary_of_Sales_by_Quarter summary_of_Sales_by_Quarter) {
        return new CreateRequestBuilder<Summary_of_Sales_by_Quarter>(servicePath, summary_of_Sales_by_Quarter, "Summary_of_Sales_by_Quarters");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Summary_of_Sales_by_Quarter> updateSummary_of_Sales_by_Quarters(
        @Nonnull
        final Summary_of_Sales_by_Quarter summary_of_Sales_by_Quarter) {
        return new UpdateRequestBuilder<Summary_of_Sales_by_Quarter>(servicePath, summary_of_Sales_by_Quarter, "Summary_of_Sales_by_Quarters");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Summary_of_Sales_by_Quarter> deleteSummary_of_Sales_by_Quarters(
        @Nonnull
        final Summary_of_Sales_by_Quarter summary_of_Sales_by_Quarter) {
        return new DeleteRequestBuilder<Summary_of_Sales_by_Quarter>(servicePath, summary_of_Sales_by_Quarter, "Summary_of_Sales_by_Quarters");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Summary_of_Sales_by_Year> getAllSummary_of_Sales_by_Years() {
        return new GetAllRequestBuilder<Summary_of_Sales_by_Year>(servicePath, Summary_of_Sales_by_Year.class, "Summary_of_Sales_by_Years");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Summary_of_Sales_by_Year> countSummary_of_Sales_by_Years() {
        return new CountRequestBuilder<Summary_of_Sales_by_Year>(servicePath, Summary_of_Sales_by_Year.class, "Summary_of_Sales_by_Years");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Summary_of_Sales_by_Year> getSummary_of_Sales_by_YearsByKey(final Integer orderID) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("OrderID", orderID);
        return new GetByKeyRequestBuilder<Summary_of_Sales_by_Year>(servicePath, Summary_of_Sales_by_Year.class, key, "Summary_of_Sales_by_Years");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Summary_of_Sales_by_Year> createSummary_of_Sales_by_Years(
        @Nonnull
        final Summary_of_Sales_by_Year summary_of_Sales_by_Year) {
        return new CreateRequestBuilder<Summary_of_Sales_by_Year>(servicePath, summary_of_Sales_by_Year, "Summary_of_Sales_by_Years");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Summary_of_Sales_by_Year> updateSummary_of_Sales_by_Years(
        @Nonnull
        final Summary_of_Sales_by_Year summary_of_Sales_by_Year) {
        return new UpdateRequestBuilder<Summary_of_Sales_by_Year>(servicePath, summary_of_Sales_by_Year, "Summary_of_Sales_by_Years");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Summary_of_Sales_by_Year> deleteSummary_of_Sales_by_Years(
        @Nonnull
        final Summary_of_Sales_by_Year summary_of_Sales_by_Year) {
        return new DeleteRequestBuilder<Summary_of_Sales_by_Year>(servicePath, summary_of_Sales_by_Year, "Summary_of_Sales_by_Years");
    }

}
