
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 5.16.0
 */

package sap.example.odata.generate.namespaces.odata;

import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.sap.cloud.sdk.datamodel.odata.client.request.ODataEntityKey;
import com.sap.cloud.sdk.datamodel.odatav4.core.SimpleProperty;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntity;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntitySet;
import com.sap.cloud.sdk.result.ElementName;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import sap.example.odata.generate.services.OdataService;


/**
 * <p>Original entity name from the Odata EDM: <b>Region</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.datamodel.odatav4.adapter.GsonVdmAdapterFactory.class)
@JsonSerialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectSerializer.class)
@JsonDeserialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectDeserializer.class)
public class Region
    extends VdmEntity<Region>
    implements VdmEntitySet
{

    @Getter
    private final java.lang.String odataType = "NorthwindModel.Region";
    /**
     * Selector for all available fields of Region.
     * 
     */
    public final static SimpleProperty<Region> ALL_FIELDS = all();
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>RegionID</b></p>
     * 
     * @return
     *     The regionID contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("RegionID")
    private Integer regionID;
    public final static SimpleProperty.NumericInteger<Region> REGION_ID = new SimpleProperty.NumericInteger<Region>(Region.class, "RegionID");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>RegionDescription</b></p>
     * 
     * @return
     *     The regionDescription contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("RegionDescription")
    private java.lang.String regionDescription;
    public final static SimpleProperty.String<Region> REGION_DESCRIPTION = new SimpleProperty.String<Region>(Region.class, "RegionDescription");
    /**
     * Navigation property <b>Territories</b> for <b>Region</b> to multiple <b>Territory</b>.
     * 
     */
    @ElementName("Territories")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Territory> toTerritories;
    /**
     * Use with available request builders to apply the <b>Territories</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Region, Territory> TO_TERRITORIES = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Region, Territory>(Region.class, "Territories", Territory.class);

    @Nonnull
    @Override
    public Class<Region> getType() {
        return Region.class;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>RegionID</b></p>
     * 
     * @param regionID
     *     The regionID to set.
     */
    public void setRegionID(
        @Nullable
        final Integer regionID) {
        rememberChangedField("RegionID", this.regionID);
        this.regionID = regionID;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>RegionDescription</b></p>
     * 
     * @param regionDescription
     *     The regionDescription to set.
     */
    public void setRegionDescription(
        @Nullable
        final java.lang.String regionDescription) {
        rememberChangedField("RegionDescription", this.regionDescription);
        this.regionDescription = regionDescription;
    }

    @Override
    protected java.lang.String getEntityCollection() {
        return "Regions";
    }

    @Nonnull
    @Override
    protected ODataEntityKey getKey() {
        final ODataEntityKey entityKey = super.getKey();
        entityKey.addKeyProperty("RegionID", getRegionID());
        return entityKey;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfFields() {
        final Map<java.lang.String, Object> cloudSdkValues = super.toMapOfFields();
        cloudSdkValues.put("RegionID", getRegionID());
        cloudSdkValues.put("RegionDescription", getRegionDescription());
        return cloudSdkValues;
    }

    @Override
    protected void fromMap(final Map<java.lang.String, Object> inputValues) {
        final Map<java.lang.String, Object> cloudSdkValues = Maps.newLinkedHashMap(inputValues);
        // simple properties
        {
            if (cloudSdkValues.containsKey("RegionID")) {
                final Object value = cloudSdkValues.remove("RegionID");
                if ((value == null)||(!value.equals(getRegionID()))) {
                    setRegionID(((Integer) value));
                }
            }
            if (cloudSdkValues.containsKey("RegionDescription")) {
                final Object value = cloudSdkValues.remove("RegionDescription");
                if ((value == null)||(!value.equals(getRegionDescription()))) {
                    setRegionDescription(((java.lang.String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((cloudSdkValues).containsKey("Territories")) {
                final Object cloudSdkValue = (cloudSdkValues).remove("Territories");
                if (cloudSdkValue instanceof Iterable) {
                    if (toTerritories == null) {
                        toTerritories = Lists.newArrayList();
                    } else {
                        toTerritories = Lists.newArrayList(toTerritories);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) cloudSdkValue)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Territory entity;
                        if (toTerritories.size()>i) {
                            entity = toTerritories.get(i);
                        } else {
                            entity = new Territory();
                            toTerritories.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(cloudSdkValues);
    }

    @Override
    protected java.lang.String getDefaultServicePath() {
        return OdataService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfNavigationProperties() {
        final Map<java.lang.String, Object> cloudSdkValues = super.toMapOfNavigationProperties();
        if (toTerritories!= null) {
            (cloudSdkValues).put("Territories", toTerritories);
        }
        return cloudSdkValues;
    }

    /**
     * Retrieval of associated <b>Territory</b> entities (one to many). This corresponds to the OData navigation property <b>Territories</b>.
     * <p>
     * If the navigation property for an entity <b>Region</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>Territories</b> is already loaded, the result will contain the <b>Territory</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Territory>> getTerritoriesIfPresent() {
        return Option.of(toTerritories);
    }

    /**
     * Overwrites the list of associated <b>Territory</b> entities for the loaded navigation property <b>Territories</b>.
     * <p>
     * If the navigation property <b>Territories</b> of a queried <b>Region</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param cloudSdkValue
     *     List of <b>Territory</b> entities.
     */
    public void setTerritories(
        @Nonnull
        final List<Territory> cloudSdkValue) {
        if (toTerritories == null) {
            toTerritories = Lists.newArrayList();
        }
        toTerritories.clear();
        toTerritories.addAll(cloudSdkValue);
    }

    /**
     * Adds elements to the list of associated <b>Territory</b> entities. This corresponds to the OData navigation property <b>Territories</b>.
     * <p>
     * If the navigation property <b>Territories</b> of a queried <b>Region</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Territory</b> entities.
     */
    public void addTerritories(Territory... entity) {
        if (toTerritories == null) {
            toTerritories = Lists.newArrayList();
        }
        toTerritories.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of Region instances.
     * 
     */
    public final static class RegionBuilder {

        private List<Territory> toTerritories = Lists.newArrayList();

        private Region.RegionBuilder toTerritories(final List<Territory> cloudSdkValue) {
            toTerritories.addAll(cloudSdkValue);
            return this;
        }

        /**
         * Navigation property <b>Territories</b> for <b>Region</b> to multiple <b>Territory</b>.
         * 
         * @param cloudSdkValue
         *     The Territorys to build this Region with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Region.RegionBuilder territories(Territory... cloudSdkValue) {
            return toTerritories(Lists.newArrayList(cloudSdkValue));
        }

    }

}
