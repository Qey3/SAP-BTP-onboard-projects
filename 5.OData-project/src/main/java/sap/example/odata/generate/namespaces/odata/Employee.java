
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 5.16.0
 */

package sap.example.odata.generate.namespaces.odata;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.sap.cloud.sdk.datamodel.odata.client.request.ODataEntityKey;
import com.sap.cloud.sdk.datamodel.odatav4.core.SimpleProperty;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntity;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntitySet;
import com.sap.cloud.sdk.result.ElementName;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import sap.example.odata.generate.services.OdataService;


/**
 * <p>Original entity name from the Odata EDM: <b>Employee</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.datamodel.odatav4.adapter.GsonVdmAdapterFactory.class)
@JsonSerialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectSerializer.class)
@JsonDeserialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectDeserializer.class)
public class Employee
    extends VdmEntity<Employee>
    implements VdmEntitySet
{

    @Getter
    private final java.lang.String odataType = "NorthwindModel.Employee";
    /**
     * Selector for all available fields of Employee.
     * 
     */
    public final static SimpleProperty<Employee> ALL_FIELDS = all();
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>EmployeeID</b></p>
     * 
     * @return
     *     The employeeID contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("EmployeeID")
    private Integer employeeID;
    public final static SimpleProperty.NumericInteger<Employee> EMPLOYEE_ID = new SimpleProperty.NumericInteger<Employee>(Employee.class, "EmployeeID");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>LastName</b></p>
     * 
     * @return
     *     The lastName contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("LastName")
    private java.lang.String lastName;
    public final static SimpleProperty.String<Employee> LAST_NAME = new SimpleProperty.String<Employee>(Employee.class, "LastName");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>FirstName</b></p>
     * 
     * @return
     *     The firstName contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("FirstName")
    private java.lang.String firstName;
    public final static SimpleProperty.String<Employee> FIRST_NAME = new SimpleProperty.String<Employee>(Employee.class, "FirstName");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Title</b></p>
     * 
     * @return
     *     The title contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("Title")
    private java.lang.String title;
    public final static SimpleProperty.String<Employee> TITLE = new SimpleProperty.String<Employee>(Employee.class, "Title");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>TitleOfCourtesy</b></p>
     * 
     * @return
     *     The titleOfCourtesy contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("TitleOfCourtesy")
    private java.lang.String titleOfCourtesy;
    public final static SimpleProperty.String<Employee> TITLE_OF_COURTESY = new SimpleProperty.String<Employee>(Employee.class, "TitleOfCourtesy");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>BirthDate</b></p>
     * 
     * @return
     *     The birthDate contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("BirthDate")
    private OffsetDateTime birthDate;
    public final static SimpleProperty.DateTime<Employee> BIRTH_DATE = new SimpleProperty.DateTime<Employee>(Employee.class, "BirthDate");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>HireDate</b></p>
     * 
     * @return
     *     The hireDate contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("HireDate")
    private OffsetDateTime hireDate;
    public final static SimpleProperty.DateTime<Employee> HIRE_DATE = new SimpleProperty.DateTime<Employee>(Employee.class, "HireDate");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Address</b></p>
     * 
     * @return
     *     The address contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("Address")
    private java.lang.String address;
    public final static SimpleProperty.String<Employee> ADDRESS = new SimpleProperty.String<Employee>(Employee.class, "Address");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>City</b></p>
     * 
     * @return
     *     The city contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("City")
    private java.lang.String city;
    public final static SimpleProperty.String<Employee> CITY = new SimpleProperty.String<Employee>(Employee.class, "City");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Region</b></p>
     * 
     * @return
     *     The region contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("Region")
    private java.lang.String region;
    public final static SimpleProperty.String<Employee> REGION = new SimpleProperty.String<Employee>(Employee.class, "Region");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>PostalCode</b></p>
     * 
     * @return
     *     The postalCode contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("PostalCode")
    private java.lang.String postalCode;
    public final static SimpleProperty.String<Employee> POSTAL_CODE = new SimpleProperty.String<Employee>(Employee.class, "PostalCode");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Country</b></p>
     * 
     * @return
     *     The country contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("Country")
    private java.lang.String country;
    public final static SimpleProperty.String<Employee> COUNTRY = new SimpleProperty.String<Employee>(Employee.class, "Country");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>HomePhone</b></p>
     * 
     * @return
     *     The homePhone contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("HomePhone")
    private java.lang.String homePhone;
    public final static SimpleProperty.String<Employee> HOME_PHONE = new SimpleProperty.String<Employee>(Employee.class, "HomePhone");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Extension</b></p>
     * 
     * @return
     *     The extension contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("Extension")
    private java.lang.String extension;
    public final static SimpleProperty.String<Employee> EXTENSION = new SimpleProperty.String<Employee>(Employee.class, "Extension");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Photo</b></p>
     * 
     * @return
     *     The photo contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("Photo")
    private byte[] photo;
    public final static SimpleProperty.Binary<Employee> PHOTO = new SimpleProperty.Binary<Employee>(Employee.class, "Photo");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Notes</b></p>
     * 
     * @return
     *     The notes contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("Notes")
    private java.lang.String notes;
    public final static SimpleProperty.String<Employee> NOTES = new SimpleProperty.String<Employee>(Employee.class, "Notes");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>ReportsTo</b></p>
     * 
     * @return
     *     The reportsTo contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("ReportsTo")
    private Integer reportsTo;
    public final static SimpleProperty.NumericInteger<Employee> REPORTS_TO = new SimpleProperty.NumericInteger<Employee>(Employee.class, "ReportsTo");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>PhotoPath</b></p>
     * 
     * @return
     *     The photoPath contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("PhotoPath")
    private java.lang.String photoPath;
    public final static SimpleProperty.String<Employee> PHOTO_PATH = new SimpleProperty.String<Employee>(Employee.class, "PhotoPath");
    /**
     * Navigation property <b>Employees1</b> for <b>Employee</b> to multiple <b>Employee</b>.
     * 
     */
    @ElementName("Employees1")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Employee> toEmployees1;
    /**
     * Navigation property <b>Employee1</b> for <b>Employee</b> to single <b>Employee</b>.
     * 
     */
    @ElementName("Employee1")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Employee toEmployee1;
    /**
     * Navigation property <b>Orders</b> for <b>Employee</b> to multiple <b>Order</b>.
     * 
     */
    @ElementName("Orders")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Order> toOrders;
    /**
     * Navigation property <b>Territories</b> for <b>Employee</b> to multiple <b>Territory</b>.
     * 
     */
    @ElementName("Territories")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Territory> toTerritories;
    /**
     * Use with available request builders to apply the <b>Employees1</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Employee, Employee> TO_EMPLOYEES1 = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Employee, Employee>(Employee.class, "Employees1", Employee.class);
    /**
     * Use with available request builders to apply the <b>Employee1</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Employee, Employee> TO_EMPLOYEE1 = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Employee, Employee>(Employee.class, "Employee1", Employee.class);
    /**
     * Use with available request builders to apply the <b>Orders</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Employee, Order> TO_ORDERS = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Employee, Order>(Employee.class, "Orders", Order.class);
    /**
     * Use with available request builders to apply the <b>Territories</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Employee, Territory> TO_TERRITORIES = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Employee, Territory>(Employee.class, "Territories", Territory.class);

    @Nonnull
    @Override
    public Class<Employee> getType() {
        return Employee.class;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>EmployeeID</b></p>
     * 
     * @param employeeID
     *     The employeeID to set.
     */
    public void setEmployeeID(
        @Nullable
        final Integer employeeID) {
        rememberChangedField("EmployeeID", this.employeeID);
        this.employeeID = employeeID;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>LastName</b></p>
     * 
     * @param lastName
     *     The lastName to set.
     */
    public void setLastName(
        @Nullable
        final java.lang.String lastName) {
        rememberChangedField("LastName", this.lastName);
        this.lastName = lastName;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>FirstName</b></p>
     * 
     * @param firstName
     *     The firstName to set.
     */
    public void setFirstName(
        @Nullable
        final java.lang.String firstName) {
        rememberChangedField("FirstName", this.firstName);
        this.firstName = firstName;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Title</b></p>
     * 
     * @param title
     *     The title to set.
     */
    public void setTitle(
        @Nullable
        final java.lang.String title) {
        rememberChangedField("Title", this.title);
        this.title = title;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>TitleOfCourtesy</b></p>
     * 
     * @param titleOfCourtesy
     *     The titleOfCourtesy to set.
     */
    public void setTitleOfCourtesy(
        @Nullable
        final java.lang.String titleOfCourtesy) {
        rememberChangedField("TitleOfCourtesy", this.titleOfCourtesy);
        this.titleOfCourtesy = titleOfCourtesy;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>BirthDate</b></p>
     * 
     * @param birthDate
     *     The birthDate to set.
     */
    public void setBirthDate(
        @Nullable
        final OffsetDateTime birthDate) {
        rememberChangedField("BirthDate", this.birthDate);
        this.birthDate = birthDate;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>HireDate</b></p>
     * 
     * @param hireDate
     *     The hireDate to set.
     */
    public void setHireDate(
        @Nullable
        final OffsetDateTime hireDate) {
        rememberChangedField("HireDate", this.hireDate);
        this.hireDate = hireDate;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Address</b></p>
     * 
     * @param address
     *     The address to set.
     */
    public void setAddress(
        @Nullable
        final java.lang.String address) {
        rememberChangedField("Address", this.address);
        this.address = address;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>City</b></p>
     * 
     * @param city
     *     The city to set.
     */
    public void setCity(
        @Nullable
        final java.lang.String city) {
        rememberChangedField("City", this.city);
        this.city = city;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Region</b></p>
     * 
     * @param region
     *     The region to set.
     */
    public void setRegion(
        @Nullable
        final java.lang.String region) {
        rememberChangedField("Region", this.region);
        this.region = region;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>PostalCode</b></p>
     * 
     * @param postalCode
     *     The postalCode to set.
     */
    public void setPostalCode(
        @Nullable
        final java.lang.String postalCode) {
        rememberChangedField("PostalCode", this.postalCode);
        this.postalCode = postalCode;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Country</b></p>
     * 
     * @param country
     *     The country to set.
     */
    public void setCountry(
        @Nullable
        final java.lang.String country) {
        rememberChangedField("Country", this.country);
        this.country = country;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>HomePhone</b></p>
     * 
     * @param homePhone
     *     The homePhone to set.
     */
    public void setHomePhone(
        @Nullable
        final java.lang.String homePhone) {
        rememberChangedField("HomePhone", this.homePhone);
        this.homePhone = homePhone;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Extension</b></p>
     * 
     * @param extension
     *     The extension to set.
     */
    public void setExtension(
        @Nullable
        final java.lang.String extension) {
        rememberChangedField("Extension", this.extension);
        this.extension = extension;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Photo</b></p>
     * 
     * @param photo
     *     The photo to set.
     */
    public void setPhoto(
        @Nullable
        final byte[] photo) {
        rememberChangedField("Photo", this.photo);
        this.photo = photo;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>Notes</b></p>
     * 
     * @param notes
     *     The notes to set.
     */
    public void setNotes(
        @Nullable
        final java.lang.String notes) {
        rememberChangedField("Notes", this.notes);
        this.notes = notes;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>ReportsTo</b></p>
     * 
     * @param reportsTo
     *     The reportsTo to set.
     */
    public void setReportsTo(
        @Nullable
        final Integer reportsTo) {
        rememberChangedField("ReportsTo", this.reportsTo);
        this.reportsTo = reportsTo;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>PhotoPath</b></p>
     * 
     * @param photoPath
     *     The photoPath to set.
     */
    public void setPhotoPath(
        @Nullable
        final java.lang.String photoPath) {
        rememberChangedField("PhotoPath", this.photoPath);
        this.photoPath = photoPath;
    }

    @Override
    protected java.lang.String getEntityCollection() {
        return "Employees";
    }

    @Nonnull
    @Override
    protected ODataEntityKey getKey() {
        final ODataEntityKey entityKey = super.getKey();
        entityKey.addKeyProperty("EmployeeID", getEmployeeID());
        return entityKey;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfFields() {
        final Map<java.lang.String, Object> cloudSdkValues = super.toMapOfFields();
        cloudSdkValues.put("EmployeeID", getEmployeeID());
        cloudSdkValues.put("LastName", getLastName());
        cloudSdkValues.put("FirstName", getFirstName());
        cloudSdkValues.put("Title", getTitle());
        cloudSdkValues.put("TitleOfCourtesy", getTitleOfCourtesy());
        cloudSdkValues.put("BirthDate", getBirthDate());
        cloudSdkValues.put("HireDate", getHireDate());
        cloudSdkValues.put("Address", getAddress());
        cloudSdkValues.put("City", getCity());
        cloudSdkValues.put("Region", getRegion());
        cloudSdkValues.put("PostalCode", getPostalCode());
        cloudSdkValues.put("Country", getCountry());
        cloudSdkValues.put("HomePhone", getHomePhone());
        cloudSdkValues.put("Extension", getExtension());
        cloudSdkValues.put("Photo", getPhoto());
        cloudSdkValues.put("Notes", getNotes());
        cloudSdkValues.put("ReportsTo", getReportsTo());
        cloudSdkValues.put("PhotoPath", getPhotoPath());
        return cloudSdkValues;
    }

    @Override
    protected void fromMap(final Map<java.lang.String, Object> inputValues) {
        final Map<java.lang.String, Object> cloudSdkValues = Maps.newLinkedHashMap(inputValues);
        // simple properties
        {
            if (cloudSdkValues.containsKey("EmployeeID")) {
                final Object value = cloudSdkValues.remove("EmployeeID");
                if ((value == null)||(!value.equals(getEmployeeID()))) {
                    setEmployeeID(((Integer) value));
                }
            }
            if (cloudSdkValues.containsKey("LastName")) {
                final Object value = cloudSdkValues.remove("LastName");
                if ((value == null)||(!value.equals(getLastName()))) {
                    setLastName(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("FirstName")) {
                final Object value = cloudSdkValues.remove("FirstName");
                if ((value == null)||(!value.equals(getFirstName()))) {
                    setFirstName(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("Title")) {
                final Object value = cloudSdkValues.remove("Title");
                if ((value == null)||(!value.equals(getTitle()))) {
                    setTitle(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("TitleOfCourtesy")) {
                final Object value = cloudSdkValues.remove("TitleOfCourtesy");
                if ((value == null)||(!value.equals(getTitleOfCourtesy()))) {
                    setTitleOfCourtesy(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("BirthDate")) {
                final Object value = cloudSdkValues.remove("BirthDate");
                if ((value == null)||(!value.equals(getBirthDate()))) {
                    setBirthDate(((OffsetDateTime) value));
                }
            }
            if (cloudSdkValues.containsKey("HireDate")) {
                final Object value = cloudSdkValues.remove("HireDate");
                if ((value == null)||(!value.equals(getHireDate()))) {
                    setHireDate(((OffsetDateTime) value));
                }
            }
            if (cloudSdkValues.containsKey("Address")) {
                final Object value = cloudSdkValues.remove("Address");
                if ((value == null)||(!value.equals(getAddress()))) {
                    setAddress(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("City")) {
                final Object value = cloudSdkValues.remove("City");
                if ((value == null)||(!value.equals(getCity()))) {
                    setCity(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("Region")) {
                final Object value = cloudSdkValues.remove("Region");
                if ((value == null)||(!value.equals(getRegion()))) {
                    setRegion(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("PostalCode")) {
                final Object value = cloudSdkValues.remove("PostalCode");
                if ((value == null)||(!value.equals(getPostalCode()))) {
                    setPostalCode(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("Country")) {
                final Object value = cloudSdkValues.remove("Country");
                if ((value == null)||(!value.equals(getCountry()))) {
                    setCountry(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("HomePhone")) {
                final Object value = cloudSdkValues.remove("HomePhone");
                if ((value == null)||(!value.equals(getHomePhone()))) {
                    setHomePhone(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("Extension")) {
                final Object value = cloudSdkValues.remove("Extension");
                if ((value == null)||(!value.equals(getExtension()))) {
                    setExtension(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("Photo")) {
                final Object value = cloudSdkValues.remove("Photo");
                if ((value == null)||(!value.equals(getPhoto()))) {
                    setPhoto(((byte[]) value));
                }
            }
            if (cloudSdkValues.containsKey("Notes")) {
                final Object value = cloudSdkValues.remove("Notes");
                if ((value == null)||(!value.equals(getNotes()))) {
                    setNotes(((java.lang.String) value));
                }
            }
            if (cloudSdkValues.containsKey("ReportsTo")) {
                final Object value = cloudSdkValues.remove("ReportsTo");
                if ((value == null)||(!value.equals(getReportsTo()))) {
                    setReportsTo(((Integer) value));
                }
            }
            if (cloudSdkValues.containsKey("PhotoPath")) {
                final Object value = cloudSdkValues.remove("PhotoPath");
                if ((value == null)||(!value.equals(getPhotoPath()))) {
                    setPhotoPath(((java.lang.String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((cloudSdkValues).containsKey("Employees1")) {
                final Object cloudSdkValue = (cloudSdkValues).remove("Employees1");
                if (cloudSdkValue instanceof Iterable) {
                    if (toEmployees1 == null) {
                        toEmployees1 = Lists.newArrayList();
                    } else {
                        toEmployees1 = Lists.newArrayList(toEmployees1);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) cloudSdkValue)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Employee entity;
                        if (toEmployees1 .size()>i) {
                            entity = toEmployees1 .get(i);
                        } else {
                            entity = new Employee();
                            toEmployees1 .add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((cloudSdkValues).containsKey("Employee1")) {
                final Object cloudSdkValue = (cloudSdkValues).remove("Employee1");
                if (cloudSdkValue instanceof Map) {
                    if (toEmployee1 == null) {
                        toEmployee1 = new Employee();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) cloudSdkValue);
                    toEmployee1 .fromMap(inputMap);
                }
            }
            if ((cloudSdkValues).containsKey("Orders")) {
                final Object cloudSdkValue = (cloudSdkValues).remove("Orders");
                if (cloudSdkValue instanceof Iterable) {
                    if (toOrders == null) {
                        toOrders = Lists.newArrayList();
                    } else {
                        toOrders = Lists.newArrayList(toOrders);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) cloudSdkValue)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Order entity;
                        if (toOrders.size()>i) {
                            entity = toOrders.get(i);
                        } else {
                            entity = new Order();
                            toOrders.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((cloudSdkValues).containsKey("Territories")) {
                final Object cloudSdkValue = (cloudSdkValues).remove("Territories");
                if (cloudSdkValue instanceof Iterable) {
                    if (toTerritories == null) {
                        toTerritories = Lists.newArrayList();
                    } else {
                        toTerritories = Lists.newArrayList(toTerritories);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) cloudSdkValue)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Territory entity;
                        if (toTerritories.size()>i) {
                            entity = toTerritories.get(i);
                        } else {
                            entity = new Territory();
                            toTerritories.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(cloudSdkValues);
    }

    @Override
    protected java.lang.String getDefaultServicePath() {
        return OdataService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfNavigationProperties() {
        final Map<java.lang.String, Object> cloudSdkValues = super.toMapOfNavigationProperties();
        if (toEmployees1 != null) {
            (cloudSdkValues).put("Employees1", toEmployees1);
        }
        if (toEmployee1 != null) {
            (cloudSdkValues).put("Employee1", toEmployee1);
        }
        if (toOrders!= null) {
            (cloudSdkValues).put("Orders", toOrders);
        }
        if (toTerritories!= null) {
            (cloudSdkValues).put("Territories", toTerritories);
        }
        return cloudSdkValues;
    }

    /**
     * Retrieval of associated <b>Employee</b> entities (one to many). This corresponds to the OData navigation property <b>Employees1</b>.
     * <p>
     * If the navigation property for an entity <b>Employee</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>Employees1</b> is already loaded, the result will contain the <b>Employee</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Employee>> getEmployees1IfPresent() {
        return Option.of(toEmployees1);
    }

    /**
     * Overwrites the list of associated <b>Employee</b> entities for the loaded navigation property <b>Employees1</b>.
     * <p>
     * If the navigation property <b>Employees1</b> of a queried <b>Employee</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param cloudSdkValue
     *     List of <b>Employee</b> entities.
     */
    public void setEmployees1(
        @Nonnull
        final List<Employee> cloudSdkValue) {
        if (toEmployees1 == null) {
            toEmployees1 = Lists.newArrayList();
        }
        toEmployees1 .clear();
        toEmployees1 .addAll(cloudSdkValue);
    }

    /**
     * Adds elements to the list of associated <b>Employee</b> entities. This corresponds to the OData navigation property <b>Employees1</b>.
     * <p>
     * If the navigation property <b>Employees1</b> of a queried <b>Employee</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Employee</b> entities.
     */
    public void addEmployees1(Employee... entity) {
        if (toEmployees1 == null) {
            toEmployees1 = Lists.newArrayList();
        }
        toEmployees1 .addAll(Lists.newArrayList(entity));
    }

    /**
     * Retrieval of associated <b>Employee</b> entity (one to one). This corresponds to the OData navigation property <b>Employee1</b>.
     * <p>
     * If the navigation property for an entity <b>Employee</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>Employee1</b> is already loaded, the result will contain the <b>Employee</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Employee> getEmployee1IfPresent() {
        return Option.of(toEmployee1);
    }

    /**
     * Overwrites the associated <b>Employee</b> entity for the loaded navigation property <b>Employee1</b>.
     * 
     * @param cloudSdkValue
     *     New <b>Employee</b> entity.
     */
    public void setEmployee1(final Employee cloudSdkValue) {
        toEmployee1 = cloudSdkValue;
    }

    /**
     * Retrieval of associated <b>Order</b> entities (one to many). This corresponds to the OData navigation property <b>Orders</b>.
     * <p>
     * If the navigation property for an entity <b>Employee</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>Orders</b> is already loaded, the result will contain the <b>Order</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Order>> getOrdersIfPresent() {
        return Option.of(toOrders);
    }

    /**
     * Overwrites the list of associated <b>Order</b> entities for the loaded navigation property <b>Orders</b>.
     * <p>
     * If the navigation property <b>Orders</b> of a queried <b>Employee</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param cloudSdkValue
     *     List of <b>Order</b> entities.
     */
    public void setOrders(
        @Nonnull
        final List<Order> cloudSdkValue) {
        if (toOrders == null) {
            toOrders = Lists.newArrayList();
        }
        toOrders.clear();
        toOrders.addAll(cloudSdkValue);
    }

    /**
     * Adds elements to the list of associated <b>Order</b> entities. This corresponds to the OData navigation property <b>Orders</b>.
     * <p>
     * If the navigation property <b>Orders</b> of a queried <b>Employee</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Order</b> entities.
     */
    public void addOrders(Order... entity) {
        if (toOrders == null) {
            toOrders = Lists.newArrayList();
        }
        toOrders.addAll(Lists.newArrayList(entity));
    }

    /**
     * Retrieval of associated <b>Territory</b> entities (one to many). This corresponds to the OData navigation property <b>Territories</b>.
     * <p>
     * If the navigation property for an entity <b>Employee</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>Territories</b> is already loaded, the result will contain the <b>Territory</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Territory>> getTerritoriesIfPresent() {
        return Option.of(toTerritories);
    }

    /**
     * Overwrites the list of associated <b>Territory</b> entities for the loaded navigation property <b>Territories</b>.
     * <p>
     * If the navigation property <b>Territories</b> of a queried <b>Employee</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param cloudSdkValue
     *     List of <b>Territory</b> entities.
     */
    public void setTerritories(
        @Nonnull
        final List<Territory> cloudSdkValue) {
        if (toTerritories == null) {
            toTerritories = Lists.newArrayList();
        }
        toTerritories.clear();
        toTerritories.addAll(cloudSdkValue);
    }

    /**
     * Adds elements to the list of associated <b>Territory</b> entities. This corresponds to the OData navigation property <b>Territories</b>.
     * <p>
     * If the navigation property <b>Territories</b> of a queried <b>Employee</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Territory</b> entities.
     */
    public void addTerritories(Territory... entity) {
        if (toTerritories == null) {
            toTerritories = Lists.newArrayList();
        }
        toTerritories.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of Employee instances.
     * 
     */
    public final static class EmployeeBuilder {

        private List<Employee> toEmployees1 = Lists.newArrayList();
        private Employee toEmployee1;
        private List<Order> toOrders = Lists.newArrayList();
        private List<Territory> toTerritories = Lists.newArrayList();

        private Employee.EmployeeBuilder toEmployees1(final List<Employee> cloudSdkValue) {
            toEmployees1 .addAll(cloudSdkValue);
            return this;
        }

        /**
         * Navigation property <b>Employees1</b> for <b>Employee</b> to multiple <b>Employee</b>.
         * 
         * @param cloudSdkValue
         *     The Employees to build this Employee with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Employee.EmployeeBuilder employees1(Employee... cloudSdkValue) {
            return toEmployees1(Lists.newArrayList(cloudSdkValue));
        }

        private Employee.EmployeeBuilder toEmployee1(final Employee cloudSdkValue) {
            toEmployee1 = cloudSdkValue;
            return this;
        }

        /**
         * Navigation property <b>Employee1</b> for <b>Employee</b> to single <b>Employee</b>.
         * 
         * @param cloudSdkValue
         *     The Employee to build this Employee with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Employee.EmployeeBuilder employee1(final Employee cloudSdkValue) {
            return toEmployee1(cloudSdkValue);
        }

        private Employee.EmployeeBuilder toOrders(final List<Order> cloudSdkValue) {
            toOrders.addAll(cloudSdkValue);
            return this;
        }

        /**
         * Navigation property <b>Orders</b> for <b>Employee</b> to multiple <b>Order</b>.
         * 
         * @param cloudSdkValue
         *     The Orders to build this Employee with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Employee.EmployeeBuilder orders(Order... cloudSdkValue) {
            return toOrders(Lists.newArrayList(cloudSdkValue));
        }

        private Employee.EmployeeBuilder toTerritories(final List<Territory> cloudSdkValue) {
            toTerritories.addAll(cloudSdkValue);
            return this;
        }

        /**
         * Navigation property <b>Territories</b> for <b>Employee</b> to multiple <b>Territory</b>.
         * 
         * @param cloudSdkValue
         *     The Territorys to build this Employee with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Employee.EmployeeBuilder territories(Territory... cloudSdkValue) {
            return toTerritories(Lists.newArrayList(cloudSdkValue));
        }

    }

}
